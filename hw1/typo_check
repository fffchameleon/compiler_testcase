// boundry test (MAX 299
fjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj

// KEYWORDS
for, do, while,  break, continue, if, else, return, struct, switch, case, default
void,int, double,float, char
const, signed, unsigned, short, long

// MACROS
NULL, __COUNTER__, __LINE__, INT_MAX, INT_MIN, CHAR_MAX, CHAR_MIN, MAX, MIN

// IDENTIFIERS
 _variable myVar123 VAR_NAME _2nd_var	 
1variable   9_myVar
variable name my var var 123
a _ A123456789012345678901234567890123456789012345678901234567890123123425423452578162875436817462764 1 !

// OPERATORS	    \n
+ ++ - -- * / % < <= > >= == != = && || ! & |

// PUNC
: ; , . [ ] () ( ) { } {} :: ...........

// INTEGER
0 -0 1 123 45 -2131 +0 +1 +123 +45
12a3 4_5 -2c131 1 23 -2 131 +-123 ++45 --2131 -2134324358973294 2187398479812567216

/*  FLOAT   */	  
0.0 0.1234 123.456 -0.0 -0.1234  +0.0 +0.1234 +123.567  .1234 1234. -.234214 -23424.
0.a23421 1234.242g3 -0.12342d1234 0. 2314 - 0.2341 +-0.123421 123.243.5431 -0..2421

/* string constants" */
"This is a string"  "Hello, World!"  "12345"  "This is a "quote" character."
"First line.\nSecond line."    "Tab\tCharacter"
Unclosed "string"

/* character constants */
'a'  'b'  'Z'   '1'  '\t'  '\n'   '\0'     
'\xDc' '\uFdFb' '\UcCaDbFdD'

/* comment*/
// This is a single-line comment
int x = 5;    // Variable declaration with a single-line comment
/* This is a multi-line comment /
/  This is a multi-line comment\n spanning multiple lines\n*/
 int x = 5; /* Variable declaration with a multi-line comment */
 /* This is a multi-line comment /* with a nested comment */ */
  // This is a single-line comment /* followed by a multi-line comment /
 / This is a multi-line comment */ // followed by a single-line comment

 /* note */
 ab123  ab-123 ab.123 

 /* #pragma source on */
#pragma source on
#pragma source off
#pragma token on
#pragma token off
